#!/usr/bin/env bash
#
# Syntax is `git browse-link FILE [POSITION]`
#

PREFERRED_REMOTES='upstream origin'

isReachable() {
    # $1=from, $2=to
    [ "$(git merge-base $1 $2)" == "$(git rev-parse --verify $1)" ]
}

reachableFromRemote() {
    # $1=head, $2=remote
    for reachableFromRemote_branch in $(git branch -r); do
        case "$reachableFromRemote_branch" in
        "$remote"/*)
            if isReachable $head $reachableFromRemote_branch; then
                return 0
            fi
            ;;
        esac
    done
    return 1
}

bestRemote() {
    # $1=head
    local otherRemote
    for otherRemote in $PREFERRED_REMOTES $(git remote); do
        if reachableFromRemote "$1" "$otherRemote"; then
            printf %s\\n "$otherRemote"
            return 0
        fi
    done
    return 1
}

originUrl() {
    local head=$(git rev-parse HEAD)

    local bestRemote=$(bestRemote $head)
    if [ -z "$bestRemote" ]; then
        printf 'Cannot find a reachable remote.\n' >&2
        exit 2
    fi

    git remote get-url "$bestRemote"
}

makeBrowseUrlPrefix() {
    # $1=origin URL
    printf %s\\n "$1" |sed -e '
        s/\.git$//
        s/^git@github\.com:\([^/]*\)\/\([^/]*\)$/https:\/\/github.com\/\1\/\2\/blob/
        s/^https:\/\/github\.com\/\([^/]*\)\/\([^/]*\)$/https:\/\/github.com\/\1\/\2\/blob/
    '
}

makePositionAnchor() {
    # $1=position
    if [ -z "$1" ]; then
        return 0
    fi
    local startLine=$(printf %s\\n "$1" |sed -ne 's/^\([0-9]*\)\..*$/\1/p')
    local endLine=$(printf %s\\n "$1" |sed -ne 's/^.*,\([0-9]*\)\..*$/\1/p')
    if [ $startLine -eq $endLine ]; then
        printf '#L%d\n' "$startLine"
        return 0
    fi
    if [ $startLine -gt $endLine ]; then
        local tmp=$startLine
        startLine=$endLine
        endLine=$tmp
    fi
    printf '#L%d-L%d\n' "$startLine" "$endLine"
}

makeGitBrowseLink() {
    local head=$(git rev-parse HEAD)
    local prefix="$(makeBrowseUrlPrefix "$(originUrl)")"
    if [ -z "$prefix" ]; then
        printf 'git-browse-link: cannot find a remote with commit %s\n' "$head" >&2
        return 3
    fi

    printf %s/%s/%s%s\\n \
        "$prefix" \
        "$head" \
        "$(git ls-files --full-name "$FILENAME")" \
        "$(makePositionAnchor "$POSITION")"
}

FILENAME="$1"
POSITION="$2"
if [ ! -e "$FILENAME" ]; then
    printf 'git-browse-link: %s: No such file or directory\n' "$FILENAME" >&2
    return 1
fi
if [ -d "$FILENAME" ]; then
    printf 'git-browse-link: %s is a directory\n' "$FILENAME" >&2
    return 1
fi

cd "$(dirname "$FILENAME")"
FILENAME="$(basename "$FILENAME")"

makeGitBrowseLink
exit $?

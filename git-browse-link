#!/usr/bin/env bash
#
# Syntax is `git browse-link FILE [POSITION]`
#

PREFERRED_REMOTES='upstream origin'

isReachable() {
    local from="$1" to="$2"
    [ "$(git merge-base $from $to)" == "$(git rev-parse --verify $from)" ]
}

reachableFromRemote() {
    local head="$1" remote="$2" branch
    for branch in $(git branch -r); do
        case "$branch" in
        "$remote"/*)
            if isReachable $head $branch; then
                return 0
            fi
            ;;
        esac
    done
    return 1
}

bestRemote() {
    local head="$1"
    local otherRemote
    for otherRemote in $PREFERRED_REMOTES $(git remote); do
        if reachableFromRemote "$head" "$otherRemote"; then
            printf %s\\n "$otherRemote"
            return 0
        fi
    done
    return 1
}

originUrl() {
    local filename="$1"
    local head=$(git rev-parse HEAD)

    local bestRemote=$(bestRemote $head)
    if [ -z "$bestRemote" ]; then
        printf 'Cannot find a reachable remote.\n' >&2
        exit 2
    fi

    git remote get-url "$bestRemote"
}

makeBrowseUrlPrefix() {
    printf %s\\n "$1" |sed -e '
        s/\.git$//
        s/^git@github\.com:\([^/]*\)\/\([^/]*\)$/https:\/\/github.com\/\1\/\2\/blob/
        s/^https:\/\/github\.com\/\([^/]*\)\/\([^/]*\)$/https:\/\/github.com\/\1\/\2\/blob/
    '
}

makePositionAnchor() {
    local position="$1"
    if [ -z "$position" ]; then
        return 0
    fi
    local startLine=$(printf %s\\n "$position" |sed -ne 's/^\([0-9]*\)\..*$/\1/p')
    local endLine=$(printf %s\\n "$position" |sed -ne 's/^.*,\([0-9]*\)\..*$/\1/p')
    if [ $startLine -eq $endLine ]; then
        printf '#L%d\n' "$startLine"
        return 0
    fi
    if [ $startLine -gt $endLine ]; then
        local tmp=$startLine
        startLine=$endLine
        endLine=$tmp
    fi
    printf '#L%d-L%d\n' "$startLine" "$endLine"
}

makeGitBrowseLink() {
    if [ ! -e "$FILENAME" ]; then
        printf 'git-browse-link: %s: No such file or directory\n' "$FILENAME" >&2
        return 1
    fi
    if [ -d "$FILENAME" ]; then
        printf 'git-browse-link: %s is a directory\n' "$FILENAME" >&2
        return 1
    fi

    local originalDirectory="$(pwd)"
    cd "$(dirname "$FILENAME")"

    local head=$(git rev-parse HEAD)
    local prefix="$(makeBrowseUrlPrefix "$(originUrl "$FILENAME")")"
    local rootedFilename="$(git ls-files --full-name "$(basename "$FILENAME")")"
    cd "$originalDirectory"

    if [ -z "$prefix" ]; then
        printf 'git-browse-link: cannot find a remote with commit %s\n' "$head" >&2
        return 3
    fi

    local anchor="$(makePositionAnchor "$POSITION")"

    printf %s/%s/%s%s\\n "$prefix" "$head" "$rootedFilename" "$anchor"
}

FILENAME="$1"
POSITION="$2"
makeGitBrowseLink
exit $?

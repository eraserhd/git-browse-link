#!/bin/sh
#
# Syntax is `git browse-link FILE [POSITION]`
#

originUrl() {
    gxi -e '
        (import :std/misc/ports
                :std/misc/process
                :std/misc/string)

        (def (reachable? from to)
          (string=? (run-process ["git" "merge-base" from to])
                    (run-process ["git" "rev-parse" "--verify" from])))

        (def (remote-branches remote)
          (run-process ["git" "for-each-ref" "--format=%(refname)"
                        (string-append "refs/remotes/" remote)]
                       coprocess: read-all-as-lines))

        (def (reachable-from-remote? head remote)
          (call/cc (lambda (cont)
                     (for-each (lambda (branch)
                                 (if (reachable? head branch)
                                   (cont #t)))
                               (remote-branches remote))
                     #f)))

        (def (remotes)
          (run-process ["git" "remote"] coprocess: read-all-as-lines))

        (def (best-remote head)
          (call/cc (lambda (cont)
                     (for-each (lambda (remote)
                                 (if (reachable-from-remote? head remote)
                                   (cont remote)))
                               ["upstream" "origin" (remotes) ...])
                     #f)))

        (def (origin-url)
          (alet* ((head   (string-trim-eol (run-process ["git" "rev-parse" "HEAD"])))
                  (remote (best-remote head)))
            (run-process ["git" "remote" "get-url" remote])))

        (displayln (origin-url))
    '
}

makeBrowseUrlPrefix() {
    gxi -e '
        (import :std/format
                :std/pregexp)

        (def (make-browse-url-prefix origin-url)
          (def github (match <> ([_ owner repo] (format "https://github.com/~a/~a/blob" owner repo))))
          (cond
            ((pregexp-match "^git@github\\.com:([^/]*)/([^/]*?)(?:\\.git)?$" origin-url)     => github)
            ((pregexp-match "^https://github\\.com/([^/]*)/([^/]*?)(?:\\.git)?$" origin-url) => github)
            (else
             origin-url)))

        (displayln (make-browse-url-prefix "'$1'"))
    '
}

makeGitBrowseLink() {
    makeGitBrowseLink_head="$(git rev-parse HEAD)"
    makeGitBrowseLink_prefix="$(makeBrowseUrlPrefix "$(originUrl)")"
    if [ -z "$makeGitBrowseLink_prefix" ]; then
        printf 'git-browse-link: cannot find a remote with commit %s\n' "$makeGitBrowseLink_head" >&2
        return 3
    fi
    gxi -e '
        (import :std/format
                :std/pregexp)

        (def (make-browse-url-prefix origin-url)
          (def github (match <> ([_ owner repo] (format "https://github.com/~a/~a/blob" owner repo))))
          (cond
            ((pregexp-match "^git@github\\.com:([^/]*)/([^/]*?)(?:\\.git)?$" origin-url)     => github)
            ((pregexp-match "^https://github\\.com/([^/]*)/([^/]*?)(?:\\.git)?$" origin-url) => github)
            (else
             origin-url)))

        (def (make-position-anchor position)
          (match (pregexp-match "^(\\d+)\\.\\d+,(\\d+)\\." position)
            ([_ (apply string->number line1) (apply string->number line2)]
             (cond
               ((=  line1 line2) (format "#L~a" line1))
               ((<= line1 line2) (format "#L~a-L~a" line1 line2))
               (else             (format "#L~a-L~a" line2 line1))))
            (#f "")))

        (def (make-git-browse-link)
          (format "~a/~a/~a~a"
                  (make-browse-url-prefix "'$(originUrl)'")
                  "'$makeGitBrowseLink_head'"
                  "'$(git ls-files --full-name "$FILENAME")'"
                  (make-position-anchor "'$POSITION'")))

        (displayln (make-git-browse-link))
    '
}

FILENAME="$1"
POSITION="$2"
if [ ! -e "$FILENAME" ]; then
    printf 'git-browse-link: %s: No such file or directory\n' "$FILENAME" >&2
    return 1
fi
if [ -d "$FILENAME" ]; then
    printf 'git-browse-link: %s is a directory\n' "$FILENAME" >&2
    return 1
fi

cd "$(dirname "$FILENAME")" || exit $?
FILENAME="$(basename "$FILENAME")"

makeGitBrowseLink
exit $?
